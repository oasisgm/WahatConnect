import talib
import pandas as pd
import numpy as np
import speech_recognition as sr
import openai
from kiteconnect import KiteConnect
from datetime import datetime, timedelta
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Replace with actual API keys
API_KEY = "your_api_key"
API_SECRET = "your_api_secret"
# Ensure your OpenAI API key is set as an environment variable for security
openai.api_key = os.getenv("OPENAI_API_KEY")

# Initialize KiteConnect
kite = KiteConnect(api_key=API_KEY)

# Function to fetch and set access token
def fetch_and_set_access_token(api_key, api_secret):
    """Fetches a new access token and sets it for the KiteConnect instance."""
    logging.info("Fetching new access token.")
    # The request_token should be obtained through the login flow
    request_token = "your_request_token"  # Placeholder: Replace with actual request token
    try:
        data = kite.generate_session(request_token, api_secret=api_secret)
        access_token = data["access_token"]
        kite.set_access_token(access_token)
        # Store the access token securely for future use
        with open("access_token.txt", "w") as f:
            f.write(access_token)
        logging.info("Access token fetched and set successfully.")
    except Exception as e:
        logging.error(f"Error fetching access token: {e}")
        raise

# Attempt to read the stored access token
try:
    with open("access_token.txt", "r") as f:
        access_token = f.read().strip()
        kite.set_access_token(access_token)
        logging.info("Access token loaded from file.")
except FileNotFoundError:
    logging.warning("Access token file not found. Fetching a new token.")
    fetch_and_set_access_token(API_KEY, API_SECRET)

# Function to fetch full historical data
def get_full_stock_history(symbol, interval="day"):
    """Fetches all available historical stock data since the company was listed."""
    logging.info(f"Fetching historical data for {symbol} with interval {interval}.")
    try:
        instrument = kite.ltp(f"NSE:{symbol}")
        instrument_token = instrument[f"NSE:{symbol}"]["instrument_token"]
    except Exception as e:
        logging.error(f"Error fetching instrument token for {symbol}: {e}")
        return pd.DataFrame()  # Return empty DataFrame on error

    # Initialize an empty DataFrame to store the historical data
    full_data = pd.DataFrame()

    # Define the date range for data fetching
    end_date = datetime.now()
    start_date = end_date - timedelta(days=3650)  # Approx. 10 years

    # Define the maximum duration per request based on interval
    if interval == "minute":
        delta = timedelta(days=30)
    elif interval == "hour":
        delta = timedelta(days=365)
    else:  # "day" or higher intervals
        delta = timedelta(days=2000)

    # Fetch data in chunks due to API limitations
    while start_date < end_date:
        next_date = start_date + delta
        if next_date > end_date:
            next_date = end_date

        try:
            data = kite.historical_data(instrument_token, start_date, next_date, interval)
            df = pd.DataFrame(data)
            full_data = pd.concat([full_data, df], ignore_index=True)
        except Exception as e:
            logging.error(f"Error fetching data from {start_date} to {next_date}: {e}")
            break  # Exit loop on error

        start_date = next_date

    logging.info(f"Fetched {len(full_data)} records for {symbol}.")
    return full_data

# Function to apply technical indicators
def apply_technical_indicators(df):
    """Calculates RSI, MACD, and SMA for stock analysis."""
    logging.info("Applying technical indicators.")
    try:
        df["RSI"] = talib.RSI(df["close"], timeperiod=14)
        df["MACD"], df["MACD_signal"], _ = talib.MACD(df["close"])
        df["SMA"] = talib.SMA(df["close"], timeperiod=50)
    except Exception as e:
        logging.error(f"Error applying technical indicators: {e}")
    return df

# Function for AI-based trade recommendation
def ai_trade_recommendation(df):
    """Provides trade recommendations with risk analysis."""
    logging.info("Generating AI-based trade recommendation.")
    if df.empty:
        logging.warning("DataFrame is empty. Cannot generate recommendation.")
        return "No data available for analysis."

    latest = df.iloc[-1]

    risk_reward_ratio = 2  # Set a default risk-reward ratio
    stop_loss = latest["close"] * 0.97  # Example: 3% stop-loss
    take_profit = latest["close"] * 1.06  # Example: 6% take-profit

    if latest["RSI"] < 30 and latest["MACD"] > latest["MACD_signal"]:
        return f"🔹 Strong Buy Signal | SL: ₹{stop_loss:.2f} | TP: ₹{take_profit:.2f} | Risk-Reward: {risk_reward_ratio}"
    elif latest["RSI"] > 70 and latest["MACD"] < latest["MACD_signal"]:
        return f"🔻 Strong Sell Signal | SL: ₹{stop_loss:.2f} | TP: ₹{take_profit:.2f} | Risk-Reward: {risk_reward_ratio}"
    else:
        return "⚠️ No clear trend. Hold or wait for confirmation."

# Function to execute trade
def execute_trade(symbol, quantity, order_type, stop_loss=None, take_profit=None):
    """Executes a trade with optional SL/TP."""
    logging.info(f"Placing {order_type} order for {quantity} shares of {symbol}.")
    try:
        order_id = kite.place_order(
            variety=kite.VARIETY_REGULAR,
            exchange=kite.EXCHANGE_NSE,
            tradingsymbol=symbol,
            transaction_type=order_type,
            quantity=quantity,
            order_type=kite.ORDER_TYPE_MARKET,
            product=kite.PRODUCT_MIS
        )
        logging.info(f"Trade Executed! Order ID: {order_id}")
        if stop_loss and take_profit:
            logging.info(f"SL: ₹{stop_loss:.2f}, TP: ₹{take_profit:.2f}")
        return order_id
    except Exception as e:
        logging.error(f"Error executing trade: {e}")
        return None

# Function for voice-based trading command
def voice_command_trading():
    """Allows users to place trades via voice commands."""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        logging.info("🎙️ Listening for trade command...")
        audio = recognizer.listen(source)

    try:
        command = recognizer.recognize_google(audio).
::contentReference[oaicite:0]{index=0}
 
